<html lang="en">

<head>
    <meta charset="utf-8">
    <title>CS 262 - Management - Lab 3</title>
    <link rel="stylesheet" href="/css/kvlinden/course2xx.css" type="text/css">
    <script type="text/javascript" src="/js/kvlinden/course.js"></script>
</head>

<body onload="addConstructionBanner(false)">
    <div id="navigationTrail">
        <a href="../index.html">cs262</a> &rarr; <a
            href="index.html">management2</a> &rarr; lab3
    </div>
    <div id="header">
        <div id="headerTitle">CS 262 &mdash; Software Engineering</div>
        <div id="headerSubtitle">Project Management &mdash; Lab 3</div>
    </div>

    <div class="quote">
        <span class="quoteText">The problem is not to make the right decision;
            itâ€™s to make the decision right.</span>
        <span class="quoteSource">&mdash; attributed to Vin Learson by F.P.
            Brooks,
            <a
                href="https://archive.fortune.com/magazines/fortune/fortune_archive/2005/12/12/8363107/index.htm">&ldquo;Quoted
                Often, Followed Rarely&rdquo;</a>, <em>Fortune
                Magazine</em>, 2005</span>
    </div>
    <!--
<div class="quote">
		<span class="quoteText">In preparing for battle I have always
			found that plans are useless, but planning indispensable.</span>
    <span class="quoteSource">&ndash; attributed to D.D. Eisenhower</span>
</div>
-->

    <p>This lab introduces GitHub. If you haven&rsquo;t already done so,
        please submit your GitHub ID using the form linked from this
        week&rsquo;s
        guide.</p>

    <h1>Using GitHub</h1>

    <p>The distributed configuration management tool we introduce in this course
        is
        <a href="https://github.com/" target="_blank" class="github">GitHub</a>,
        which is based on <a href="https://git-scm.com/" target="_blank"
            class="external">Git</a>.
    </p>

    <p> We&rsquo;ll use Git/GitHub both to submit both individual and team
        assignment code. Git is traditionally used via the command line and
        these lab materials will present it that way, but you can also use Git
        GUI tools if you&rsquo;d like to do so. E.g., WebStorm provides a
        Git/GitHub plugin (see also <a
            href="https://git-scm.com/download/gui/windows" class="git"
            target="_blank">GUI Clients</a>).</p>

    <h2>Cloning Code from GitHub</h2>

    <p>You&rsquo;ll be using course-provided code on GitHub.</p>

    <div class="exercise">
        <strong>Do this&hellip;</strong>

        <p>Clone a copy of the course sample code found in <a
                href="https://github.com/kvlinden-courses/cs262-code"
                target="_blank"
                class="github">https://github.com/kvlinden-courses/cs262-code</a>.
        <blockquote>
            <pre>% git clone https://github.com/kvlinden-courses/cs262-code.git
% cd <u><em>cs262-code</em></u></pre>
        </blockquote>

        <p>This repo includes useful code for selected class assignments.</p>
    </div>

    <p>Make it a practice of pulling changes from this course repo before you
        use it to make sure that you have the most recent code. Treat it as
        read-only.</p>

    <h2>Pushing Code to GitHub</h2>

    <p>You&rsquo;ll also be using GitHub to submit course assignments.</p>

    <div class="exercise">
        <strong>Exercise 3.1</strong>

        <p>For this exercise, push your Expo applications from the first two
            labs
            to new repo(sitory)s on your GitHub account as follows.</p>
        <ol type="a">
            <li>
                <p>On GitHub, create a new <em>private</em> repo under your
                    personal account named <code>cs262</code>, and grant read
                    access to
                    the course instructors and assistants (Do this using
                    <em>Settings</em>&rarr;<em>Manage
                        access</em>&rarr;<em>Invite teams
                        or people</em>; see the Moodle forum for our GitHub
                    IDs). You
                    will submit all lab and homework applications as
                    subdirectories in
                    this repo. Private repos require authentication, which now
                    requires a <a
                        href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token#using-a-token-on-the-command-line"
                        target="_blank" class="github">GitHub personal access
                        token</a>. These tokens are machine-specific and can be
                    saved in IDEs (e.g., <a
                        href="https://www.jetbrains.com/help/idea/github.html"
                        target="_blank" class="external">Intellij</a>, <a
                        href="https://code.visualstudio.com/docs/editor/github"
                        target="_blank" class="external">VSCode</a>) and or
                    commandline tools (e.g., GitBash, Linux).
                </p>
            </li>
            <li>
                <p>On your development machine:</p>
                <ol type="i">
                    <li>
                        <p>Go to your development directory and clone your new
                            (empty)
                            repo into that directory as you did with the class
                            code
                            above. N.b. GitHub will give you the appropriate URL
                            to use
                            (see the green &ldquo;Code&rdquo; button).</p>
                    </li>
                    <li>Copy your two completed lab exercises into
                        <code>lab01</code> and <code>lab02</code>
                        sub-directories in
                        this new Git repo directory and copy the readme file
                        into
                        the root of the lab subdirectory. The structure should
                        look
                        as follows:
                        <blockquote>
                            <pre>cs262
    lab01
        my-lab01-app
        README.md
    lab02
        my-lab02-app
        README.md
cs262-code
    ...</pre>
                        </blockquote>

                        <!-- <p>Note that Expo automatically creates a Git repo for each new project,
                            which would create a nested repo for every assignment &mdash; possible
                            but tricky. Instead, we ask you to manually delete the <code>.git</code>
                            folder in each of your application directories.</p> -->
                    </li>
                    <li>Update your readme files to fully document each lab with
                        at
                        least the following information, properly formatted
                        using
                        markdown:
                        <div
                            style="width: 40%; padding: 10px; margin: 10px; margin-left: 35px; background: white; border: 1px solid black;">
                            <h2>CS 262 - Lab <em><u>#</u></em></h2>
                            <p>This lab is based on <em><u>hyperlink to lab
                                        source</u></em>.</p>
                            <p><u><em>hacks that I had to make</em></u></p>
                            Answers to the lab questions:
                            <ul>
                                <li><em><u>answer #1</u></em></li>
                                <li><em><u>&hellip;</u></em></li>
                            </ul>
                        </div>
                    </li>
                    <li>From the new <code>cs262</code> repo directory, add,
                        commit and push your lab code to your new
                        <code>cs262</code> GitHub repo.
                        <blockquote>
                            <pre>% git add .
% git commit -m "<u><em>a concise, informative commit message</em></u>"
% git branch -M main
% git push origin main</pre>
                        </blockquote>
                    </li>
                </ol>

            <li>
                <p>On GitHub:</p>
                <ul>
                    <li>Check to see that you have new code in the repo listed
                        under your account. The readme file should display,
                        properly-formatted, on the bottom of the root page of
                        the repo. <code>node_modules</code> should be
                        .git-ignored.
                    </li>
                    <!--
                <li>Move your new repo into our private space by finding it
                    under your GitHub account, choosing <em>Settings&rarr;Transfer
                        ownership</em> and naming our private team (e.g.,
                    <code>cs262/kvlinden</code>).
                </li>
                -->
                </ul>
            </li>
        </ol>
        <p>At this point we should both have access to your new repo.</p>
    </div>

    <p>For future lab and homework assignments, you&rsquo;ll create
        new sub-directories in your <code>cs262</code> Git repo
        directory and push them as you did these first two. The
        structure will be as follows:</p>
    <blockquote>
        <pre>cs262
    - lab01
    - lab02
    - homework1
    - lab04
    - &hellip;</pre>
    </blockquote>
    <p>This way, you will have one Git repo, with a single
        <code>.git</code> sub-directory in the root, and a separate
        sub-directory for each assignment, each of which will contain a
        full application file structure. Note that there isn't a lab03
        directory because this lab doesn't require any new code.
    </p>
    <p>Be sure to include the <code>.gitignore</code> file in each application
        sub-directory in order to prevent committing/pushing (large!) non-source
        files unnecessarily to Git/GitHub (e.g., the <code>node_modules/</code>
        directory for NodeJS applications); most application builders create
        this
        file automatically. GitHub should store source code only.
    </p>

    <h2>Collaborating using GitHub</h2>

    <p>We&rsquo;ll also use GitHub for team project code and collaboration.</p>

    <div class="exercise">
        <strong>Exercise 3.2</strong>

        <p>Your team should do the following.</p>
        <ol type="A">
            <li>
                <p>Designate one team member to go to GitHub and:</p>
                <ol type="I">
                    <li>Create a new organization and add all team members
                        (and us!) as members with full administrative rights.
                        Name it something appropriate (e.g.,
                        <code>calvin-cs262-fall20<u><em>XX</em></u>-team<u><em>Y</em></u></code>&nbsp;).
                    </li>
                    <li>Create new public repos under this organization:
                        <ul>
                            <li><em>Project</em> &mdash; This one holds your
                                project deliverables, e.g., the vision statement
                                you will publish for project 1.
                            </li>
                            <li><em>Client</em> &mdash; This one holds your
                                client application code, e.g., the hello-world
                                prototype you will commit/push for project 1.
                            </li>
                            <li><em>Service</em> &mdash; This one will
                                eventually hold your data service application.
                            </li>
                        </ul>
                    </li>
                </ol>
                <p>Here&rsquo;s an example team organization: <a
                        href="https://github.com/calvin-cs262-organization"
                        target="_blank"
                        class="github">https://github.com/calvin-cs262-organization</a>.
                    This organization will hold all your team code and
                    deliverables throughout the semester. You can now begin to
                    collaborate using this organization as a shared resource.
                </p>
            </li>

            <li>
                <p>All team members should now do the following:</p>
                <ol type="I">
                    <li>On their local machines:
                        <ol type="a">
                            <li>Clone all three repos to their local cs262
                                directory.
                            </li>
                            <li>Go to the project repo and create a new branch
                                <blockquote>
                                    <pre>% git checkout -b temp/<u><em>username</em></u></pre>
                                </blockquote>
                            </li>
                            <li>In this branch, add a junk text file to the root
                                of the project repo named
                                <code><u><em>username</em></u>.txt</code>.
                                Include a (fun, likely irrelevant) message in
                                the file.
                            </li>
                            <li>Add the file as a staged Git change by saying:
                                <blockquote>
                                    <pre>% git add <u><em>newFilename</em></u></pre>
                                </blockquote>
                            </li>
                            <li>Commit this change to their local Git branch.
                            </li>
                            <li>Push their new personal branch to the GitHub
                                repo by saying: <blockquote>
                                    <pre>% git push origin temp/<u><em>username</em></u></pre>
                                </blockquote>
                            </li>
                        </ol>
                    </li>
                    <li>
                        <p>On GitHub:
                        <ol type="a">
                            <li>Create a pull request for their new branch by
                                choosing <em>VCS&rarr;Git&rarr;Create Pull
                                    Request</em>.
                            </li>
                        </ol>
                    </li>
                </ol>
                <p>GitHub should now show pull requests from all team members.
                </p>
            </li>

            <li>Now, a designated team member can go to GitHub, review the pull
                requests, merge them into main, and verify that the changes from
                all team members are integrated into the main branch.
            </li>

            <li>
                <p>Finally, all team members can move back to the main branch on
                    their local machines, pull the changes from GitHub, and
                    verify that all the files have been downloaded locally.</p>
                <blockquote>
                    <pre>% git checkout main</pre>
                </blockquote>
            </li>
        </ol>

        <p>Leave the junk files and the test branches out there for a week so
            that we can confirm that you&rsquo;ve pushed them; the team should
            delete them all later.</p>

        <p>You&rsquo;re now in a position to build and push your project 1
            (Inception-Vision), hello-world prototype to the client repo.</p>

    </div>

    <p>As with your team Trello board, your GitHub repo(s) should be active
        throughout the week. Code should be getting written; pull requests made,
        reviewed and merged; etc. Check out the &ldquo;Pulse&rdquo; and the
        &rdquo;Graphs&rdquo; provided by GitHub for your team repo(s) (see the
        menu bar on the right). We&rsquo;ll use these tools to monitor your team
        progress and participation.</p>

    <h1>Working with your Team</h1>

    <h2>Running a Sprint Retrospective and Planning Session</h2>

    <p>Development in Scrum is punctuated by sprint planning and review
        sessions. In this session we will do the following.</p>
    <ul>
        <li>Review what we did in the last (short) sprint.
            <ul>
                <li>Did we complete all our tasks?</li>
                <li>What was our velocity?</li>
                <li>Which team practices should we <em>keep</em> doing? Which
                    should we <em>stop</em> doing? Which should we
                    <em>start</em> doing?
                </li>
            </ul>
        </li>
        <li>Plan what we need to do in the next.
            <ul>
                <li>Retire the past sprint on Trello and create/populate the
                    next sprint&rsquo;s &ldquo;Backlog&rdquo;,
                    &ldquo;ToDo&rdquo; and &ldquo;Doing&rdquo; columns.
                </li>
            </ul>
        </li>
    </ul>

    <p>Normally, these planning meetings are separate and each takes time, so
        we&rsquo;ll only be able to get you started by hitting the highlights.
    </p>

    <div class="exercise">
        <b>Exercise 3.3</b>
        <p>Participate actively in your team&rsquo;s meeting.</p>
        <p>Please update your Moodle &ldquo;Project Teams&rdquo; entry by adding
            a hyperlink for your GitHub organization.</p>
    </div>

    <h1>Checking in</h1>

    <p>There is nothing to submit in Moodle for this lab. Push your work to the
        GitHub repo you identified in the GitHub IDs file given in the <a
            href="guide.html">guide</a>.</p>

    <ul>
        <li>60% &mdash; GitHub &mdash; We&rsquo;ll assess both your personal
            GitHub repo and your contributions to the team repo for this lab.
        </li>
        <li>40% &mdash; Team meeting</li>
    </ul>

    <div id="footer">
        $Date: Fri 13 Sep 2024 05:22:57 PM EDT $ <br>&copy; 2024 Keith VanderLinden
    </div>
</body>

</html>